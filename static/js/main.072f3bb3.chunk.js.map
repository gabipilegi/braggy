{"version":3,"sources":["BragsScreen/Brags.jsx","BragsScreen/CreateBrag.jsx","BragsScreen/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Brags","brags","classes","makeStyles","theme","brag","wordBreak","useStyles","Container","List","map","index","class","ListItem","key","ListItemIcon","ChatBubbleRounded","CreateBrag","onSubmit","onChange","data-testid","TextField","id","fullWidth","required","label","multiline","rows","value","variant","Button","type","endIcon","SendRounded","BragsScreen","useState","setState","title","color","palette","text","secondary","Grid","container","item","xs","event","preventDefault","target","previousState","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAgCeA,EA3BD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAOTC,EANYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,UAAW,gBAICC,GAEhB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGR,EAAMS,KAAI,SAACL,EAAMM,GAAP,OACT,yBAAKC,MAAOV,EAAQG,MAClB,kBAACQ,EAAA,EAAD,CAAUC,IAAKH,GACb,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,OAEDX,U,yBCQAY,EA3BI,SAAC,GAAkC,IAAhCZ,EAA+B,EAA/BA,KAAMa,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACpC,OACE,kBAACX,EAAA,EAAD,KACE,0BAAMU,SAAUA,EAAUE,cAAY,aACpC,6BACE,kBAACC,EAAA,EAAD,CACEC,GAAG,OACHC,WAAS,EACTC,UAAQ,EACRC,MAAM,iBACNC,WAAS,EACTC,KAAM,EACNC,MAAOvB,EACPc,SAAUA,EACVU,QAAQ,cAGZ,6BACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAASR,WAAS,EAACS,QAAS,kBAACC,EAAA,EAAD,OAAzC,Y,SCwBKC,EAxCK,WAAO,IAAD,EACYC,mBAAS,CAAE9B,KAAM,GAAIJ,MAAO,KADxC,0BACfI,EADe,EACfA,KAAMJ,EADS,EACTA,MAASmC,EADA,KAQlBlC,EALYC,aAAW,SAACC,GAAD,MAAY,CACvCiC,MAAO,CACLC,MAAOlC,EAAMmC,QAAQC,KAAKC,cAGdlC,GAmBhB,OACE,kBAACmC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,uBAAGjC,MAAOV,EAAQmC,OAAlB,uCACA,kBAAC,EAAD,CAAYhC,KAAMA,EAAMa,SArBb,SAAC4B,GAChBA,EAAMC,iBACNX,EAAS,CACP/B,KAAM,GACNJ,MAAM,GAAD,mBAAMA,GAAN,CAAaI,OAiB4Bc,SAbjC,SAAC2B,GAChB,IAAIlB,EAAQkB,EAAME,OAAOpB,MAEzBQ,GAAS,SAACa,GAAD,MAAoB,CAC3B5C,KAAMuB,EACN3B,MAAOgD,EAAchD,cAUrB,kBAACyC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CAAO5C,MAAOA,OC5BPiD,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.072f3bb3.chunk.js","sourcesContent":["import React from 'react'\nimport { List, ListItem, ListItemIcon, Container } from '@material-ui/core'\nimport { ChatBubbleRounded } from '@material-ui/icons'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst Brags = ({ brags }) => {\n  const useStyles = makeStyles((theme) => ({\n    brag: {\n      wordBreak: 'break-all',\n    },\n  }))\n\n  const classes = useStyles()\n\n  return (\n    <Container>\n      <List>\n        {brags.map((brag, index) => (\n          <div class={classes.brag}>\n            <ListItem key={index}>\n              <ListItemIcon>\n                <ChatBubbleRounded />\n              </ListItemIcon>\n              {brag}\n            </ListItem>\n          </div>\n        ))}\n      </List>\n    </Container>\n  )\n}\n\nexport default Brags\n","import React from 'react'\nimport { TextField, Button, Container } from '@material-ui/core'\nimport { SendRounded } from '@material-ui/icons'\n\nconst CreateBrag = ({ brag, onSubmit, onChange }) => {\n  return (\n    <Container>\n      <form onSubmit={onSubmit} data-testid=\"brag-form\">\n        <div>\n          <TextField\n            id=\"brag\"\n            fullWidth\n            required\n            label=\"Your brag here\"\n            multiline\n            rows={4}\n            value={brag}\n            onChange={onChange}\n            variant=\"outlined\"\n          />\n        </div>\n        <div>\n          <Button type=\"submit\" fullWidth endIcon={<SendRounded />}>\n            Brag\n          </Button>\n        </div>\n      </form>\n    </Container>\n  )\n}\n\nexport default CreateBrag\n","import React, { useState } from 'react'\nimport Brags from './Brags'\nimport CreateBrag from './CreateBrag'\nimport { Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst BragsScreen = () => {\n  const [{ brag, brags }, setState] = useState({ brag: '', brags: [] })\n\n  const useStyles = makeStyles((theme) => ({\n    title: {\n      color: theme.palette.text.secondary,\n    },\n  }))\n  const classes = useStyles()\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    setState({\n      brag: '',\n      brags: [...brags, brag],\n    })\n  }\n\n  const onChange = (event) => {\n    let value = event.target.value\n\n    setState((previousState) => ({\n      brag: value,\n      brags: previousState.brags,\n    }))\n  }\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <p class={classes.title}>What are we gonna brag about today?</p>\n        <CreateBrag brag={brag} onSubmit={onSubmit} onChange={onChange} />\n      </Grid>\n      <Grid item xs={12}>\n        <Brags brags={brags} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default BragsScreen\n","import React from 'react'\nimport './App.css'\nimport BragsScreen from './BragsScreen'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BragsScreen />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}